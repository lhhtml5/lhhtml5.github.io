"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2238],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},a=Object.keys(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)t=a[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=l.createContext({}),s=function(e){var n=l.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return l.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=r,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return t?l.createElement(f,o(o({ref:n},p),{},{components:t})):l.createElement(f,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<a;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9116:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var l=t(7462),r=(t(7294),t(3905));const a={slug:"review",tags:["go over","219046"]},o=void 0,i={permalink:"/blog/review",source:"@site/blog/review.md",title:"review",description:"",date:"2023-02-21T08:26:14.325Z",formattedDate:"2023\u5e742\u670821\u65e5",tags:[{label:"go over",permalink:"/blog/tags/go-over"},{label:"219046",permalink:"/blog/tags/219046"}],readingTime:2.325,hasTruncateMarker:!1,authors:[],frontMatter:{slug:"review",tags:["go over","219046"]},prevItem:{title:"",permalink:"/blog/February28"},nextItem:{title:"See",permalink:"/blog/see"}},u={authorsImageUrls:[]},s=[],p={toc:s};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,l.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"// js\n/**\n js\u6570\u636e\u7c7b\u578b\uff1astring,number,boolean,undefined,null,symbol,bigint\n             object:Array Function Date Math\n\u6570\u636e\u7c7b\u578b\u5224\u65ad typeof   null \u4e0d\u80fd\u5224\u65ad\n             instanceof \u53ef\u4ee5\u5224\u65ad\u590d\u6742\u7c7b\u578b\n             Object.prototype.toString.call()\n */\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    import { defineComponent,onBeforeMount,ref,watch,reactive,getCurrentInstance} from 'vue'\n    import {QuestionFilled,Setting}from '@element-plus/icons-vue'\n    export default defineComponent({\n        name:'Afrom',\n        props:{\n            inline:{\n                type:Boolean,\n                default:false\n            },\n            size:{\n                type:String,\n                default:','\n            },\n            jobject:{\n                type:Object,\n                required:true,\n                default:()=>{\n                    return {value:[]}\n                }\n            },\n            defValue:{\n                type:Object,\n                required:true,\n                default:() => {\n                    return {value:[]}\n                }\n            },\n            labelWidth:{\n                type:String,\n                default:'125px'\n            },\n            isLabelWidth:{\n                type:Boolean,\n                default:true\n            },\n            itemWidth:{\n                type:String,\n                default:''\n            }\uff0c\n            disable:{\n                type:Array,\n                default:()=>{\n                    return []\n                }\n            },\n            isShow:{\n                type:Array,\n                default:()=>{\n                    return []\n                }\n            },\n            hasCheckParam:{\n                type:Boolean,\n                default:() => {\n                    return false\n                }\n            },\n            selectParam:{\n                type:Array,\n                default:() => {\n                    return []\n                }\n            },\n            isShowNote:{\n                type:Boolean,\n                default:() => {\n                    return false\n                }\n            },\n            isDisabledAll:{\n                type:Boolean,\n                default:()=>{\n                    return false\n                }\n            }\n        },\n        emits:['inputChange','focus','buttonClick','selectSetting'],\n        setup(props,{emit,attrs}){\n            const uSet = props\n            const localJobject = reactive(uSet.jobject)\n            let jvalue:any = reactive({})\n            const jrules:any = {}\n            const jkey = ref(0)\n            watch(\n                uSet.jobject,\n                ()=>{\n                    jkey.value++\n                    initCR()\n                },\n                { deep:true }\n            )\n            const restJRules = ():void=>{\n                for(let i=0;i<localJobject.value.length;i += 1){\n                    const element:any = localJobject.value[i]\n                    if(element.type == 'checkbox'){\n                        jvalue[element.prop] = reactive([])\n                    }\n                    if(element.rules && !(uSet.isShow && uSet.isShow.includes(element.prop))){\n                        jrules[element.prop] = element.rules\n                    }else{\n                        jrules[element.prop] = []\n                    }\n                }\n            }\n            const initCR = () => {\n                if(uSet.defValue){\n                    jvalue = uSet.defValue\n                }\n                resetJRules()\n                for(let i=0;i<localJobjevt.value.length; i += 1){\n                    const element:any = localJobject.value[i]\n                    if(element.type == 'checkbox' && uSet.defValue[element.prop as string].length == 0){\n                        jvalue[element.prop]=ref([])\n                    }\n                    if(element.rules && !(uSet.isShow && uSet.isShow.includes(element.prop))){\n                        jrules[element.prop]= element.rules\n                    }\n                }\n            }\n            onBeforeMount(initCR)\n            const handleChange = (ftype:string,index:number,data:any,type:string) => {\n                emit('inputChange',index,data,type,ftype)\n            }\n            const focusMethod = (ftype:string,index:number,data:any,type:string) => {\n                emit('focus',index,data,type,ftype)\n            }\n            const selectParams = reactive({list:uSet.selectParm as string[]})\n            const instance = getCurrentInstance()\n            if(instance){\n                Object.assign(instance.proxy,{\n                    async getValue():Promise<any>{\n                        const t:any = this\n                        const rValue = await t.$refs.aform.validate()\n                        if(rValue){\n                            return uSet.hasCheckParam?{value:jvalue,checkList:selectParams.list}:jvalue\n                        }\n                        return null\n                    }\n                })\n            }\n            const selectSetting = (prop:string)=>{\n                emit('selectSetting',prop)\n            }\n            const changeCheckboxGroup = (list:any)=>{\n                selectParams.list = list\n            }\n            return () => {\n                return (\n                    <el-form inline={uSet.inline} size={uSet.size} label-width={uSet.isLabelWidth?uSet.labelWidth:''}\n                    model={jvalue}\n                    rules={jrules}\n                    ref=\"aform\"\n                    key={jkey}\n                    >\n                    {\n                        localJobject.value.map(($val:any,$index:number)=>{\n                            return (\n                                <el-form-item\n                                    label={$val.label}\n                                    prop={$val.prop}\n                                    key={$index}\n                                    class=\"aform\"\n                                    v-show={!(uSet.isShow && uSet.isShow.includes($val.prop))}\n                                    v-slots={\n                                        uSet.hasCheckParam?{\n                                            label:()=>{\n                                                return (\n                                                    <>\n                                                    &nbsp;&nbsp;<span>{$val.label}\n                                                    </span>\n                                                    <el-checkbox-group>\n\n                                                    <el-checkbox label={$val.prop}\n                                                    class=\"checkbox-span\"\n                                                    ></el-checkbox>\n                                                    </el-checkbox-group>\n                                                    </>\n                                                )\n                                            }\n                                        } : {}\n                                    }\n                                >\n                                {(():any=>{\n                                    if($val.type == 'number'){\n                                        return (\n                                            <>\n                                                <el-input-number\n                                                 style={{width:$val.width ? $val.width : uSet.itemWidth}}\n                                                 v-model={jvalue[$val.prop]}\n                                                 min={$val.min}\n                                                 placeholder={$val.placeholder?$val.placeholder?$val.placeholder:`\u8bf7\u8f93\u5165${$val.label}`}\n                                                 disabled={uSet.isDisabledAll || ($val.disable && uSet.disable.includes($val.disable))}\n                                                 onChange={()=>handleChange($val.type,$index,jvalue[$val.prop],$val.prop)}\n                                                 controls-position=\"right\"\n                                                ></el-input-number>\n                                                <span style=\"margin-left:10px\">\n                                                    <el-tooltip content=\"0s\u4e3a\u4e0d\u91c7\u6837\uff0c\u4e0d\u8865\u6570\" placement=\"top\">\n                                                        <el-icon>\n\n                                                        </el-icon>\n                                                    </el-tooltip>\n                                                </span>\n                                            </>\n                                        )\n                                    }\n                                    if(!$val.type || $val.type == 'text'){\n                                        return (\n                                            <el-input\n                                            style={{width:$val.width ? $val.width:uSet.itemWidth}}\n                                            v-model={jvalue[$val.prop]}\n                                            placeholder={\n                                                $val.placeholder?$val.placeholder:`\u8bf7\u8f93\u5165${$val.label}`\n                                            }\n                                            disabled={uSet.isDisabledAll || ($val.disable && uSet.disable.includes($val.disable))}\n                                            onChange={()=>{\n                                                handleChange($val.type,$index,jvalue[$val.prop],$val.prop\n                                            }}\n                                            onFocus={()=>{\n                                                $val.focusM?focusMethod($val.type,$index.jvalue[$val.prop],$val.prop):''\n                                            }}\n                                            maxlength={$val.maxlength?$val.maxlength:null}\n                                            auto-complete=\"off\"\n                                            show-word-limit\n                                            >\n                                            </el-input>\n                                        )\n                                    }\n                                    if($val.type == 'password'){\n                                        return (<el-input></el-input>)\n                                    }\n                                })()\n                                }\n                                </el-from-item>\n                            )\n                        })\n                    }\n                    </el-form>\n                )\n            }\n        },\n        data(){\n            return {jvalue:{}}\n        }\n    })\n")))}c.isMDXComponent=!0}}]);